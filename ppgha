library(tidyverse)
library(worldfootballR)
library(data.table)
library(gt)
library(paletteer)
library(circlize)


fixtures <- get_match_results(country = "NED", gender = "M", season_end_year = 2022, tier = "1st")  %>%
  select(Home, HomeGoals,Away,AwayGoals)

results <- fixtures %>%
  drop_na(HomeGoals) %>%
  mutate(HomeP = case_when(HomeGoals > AwayGoals ~ 3,
                           AwayGoals > HomeGoals ~ 0,
                           TRUE ~ 1),
         AwayP = case_when(HomeGoals < AwayGoals ~ 3,
                            AwayGoals < HomeGoals ~ 0,
                            TRUE ~ 1))

Home_ppg <- results %>% 
  group_by(Home) %>%
  summarise(hppg = sum(HomeP)/n())

Away_ppg <-  results %>% 
  group_by(Away) %>%
  summarise(appg = sum(AwayP)/n())

remaining <- fixtures %>%
  filter(is.na(HomeGoals)) %>%
  left_join(Home_ppg) %>%
  left_join(Away_ppg)

teams <- unique(remaining$Home)
teamslist <- list()
for(i in 1:length(teams)){
df <- remaining %>% 
  filter(Home == teams[i] |
           Away == teams[i]) %>%
  mutate(opp_strength = case_when(
      Home==teams[i] ~ as.numeric(appg),
      TRUE ~ as.numeric(hppg)
  )) %>%
    mutate(Team = teams[i]) %>%
    select(Team, opp_strength) 

df <- df %>%
  mutate(match = 1:nrow(df))

teamslist[[i]] <- df
}

df %>% gt()
strength <- do.call(rbind, unname(teamslist))

df_gt <- pivot_wider(strength, names_from=match,values_from = opp_strength) 


is.numeric(df_gt$`2`)
rowMeans(df_gt)

df_gt %>%
  mutate(avg = rowMeans(df_gt[,-1])) %>%
  arrange(-avg) %>%
  gt() %>%
  tab_header(
    title = md("**Strength of opponents during remaining games**"),
    subtitle = md("Points per game of opponent. Home and away seperated")
  ) %>%
  fmt_number(
    columns = c(`1`:avg),
    decimals = 2
  ) %>%
  data_color(
    columns = c(`1`:avg),
    colors = scales::col_numeric(
      # Using a function from paletteer to generate a vector of colors
      # Note that you need to wrap paletteer_d outputs in as.character()
      palette = as.character(paletteer::paletteer_d(#"scico::berlin"
        "ggsci::red_material"
        , n = 5)),
      # Domain is from scales::col_numeric
      # Domain = The possible values that can be mapped
      # We don't HAVE to set a range for this since
      # we're using it inside data_color()
      domain = NULL
    )
  ) %>% 
  tab_style(
    style = list(
      cell_borders(sides = "left", color = "black", weight = px(3))
    ),
    locations = cells_body(
      # entire column
      columns = c(avg)
    )
  ) %>%
  opt_table_font(
    font = list(
      google_font(name = "Roboto"),
     "Serif"
    )
  )  %>%
  tab_style(
    style = cell_borders(sides = "bottom", color = "black", weight = px(3)),
    locations = cells_body(rows = 18)
  ) %>%
  data_color(
    columns = c(`1`:`13`),
    colors = scales::col_numeric(
      palette = paletteer::paletteer_d(
        palette = "ggsci::red_material", n=7
      ) %>% as.character(),
      domain = NULL
    )
  )  
  
  
